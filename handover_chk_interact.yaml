---
- name: Handover check
  hosts: aix72

  vars:
    etcpath: /home/cmopr/etc
    datacenter: "{{ etcpath }}/DC.txt"
    cmopr_messages: /home/cmopr/log/messages
    ethercl_tmp: /home/cmopr/tmp/ethercl.txt
    results: []

  pre_tasks:

    # DC
    - name: Input datacenter
      pause:
        prompt: "Which datacenter? e.g HCH,DC6,DC7,DC8"
        echo: yes
      register: result
    - set_fact:
        DC: "{{ result.user_input | upper }}"

    - name: Check if {{ DC }} is in {{ datacenter }}
      shell: "grep -i {{ DC }} {{ datacenter }} > /dev/null 2>&1"
      ignore_errors: true
      register: find_output

    - fail:
        msg: "Please enter valid datacenter. e.g HCH,DC6,DC7,DC8"
      when: find_output.rc != 0

    # HW
    - name: Input HW
      pause:
        prompt: "VM or LPAR?"
        echo: yes
      register: result
    - set_fact:
        HW: "{{ result.user_input | lower }}" 
    - name: HW validation
      fail:
        msg: "Hardware type is invalid: please enter ( VM or LPAR )!"
      when: HW != "vm" and HW != "lpar"

    # MODE
    - name: Input MODE
      pause:
        prompt: "Prod or non-prod?"
        echo: yes
      register: result
    - set_fact:
        MODE: "{{ result.user_input | lower }}" 
    - name: MODE validation
      fail:
        msg: "Mode is invalid: please enter ( Prod or non-prod )!"
      when: MODE != "prod" and MODE != "non-prod"

    # ZONE
    - name: Input ZONE
      pause:
        prompt: "DMZ or Intranet?"
        echo: yes
      register: result
    - set_fact:
        ZONE: "{{ result.user_input | lower }}" 
    - name: ZONE validation
      fail:
        msg: "Zone is invalid: please enter ( DMZ or Intranet )!"
      when: ZONE != "dmz" and ZONE != "intranet"

    # OS type
    - name: Input OS type
      pause:
        prompt: "OS type? Sybase or Oracle"
        echo: yes
      register: result
    - set_fact:
        OS_type: "{{ result.user_input | lower }}" 
    - name: OS_type validation
      fail:
        msg: "OS type is invalid: please enter ( Sybase or Oracle )!"
      when: OS_type != "sybase" and OS_type != "oracle"

    # No. of CPU
    - name: Input No. of CPU
      pause:
        prompt: "Enter No. of CPU"
        echo: yes
      register: result
    - set_fact:
        CPU: "{{ result.user_input }}" 

    - name: Check if {{ CPU }} is a valid integer
      shell: "echo {{ CPU }} |egrep '^[0-9]+$' > /dev/null 2>&1"
      ignore_errors: true
      register: shell_output

    - fail:
        msg: "No. of CPU is invalid!"
      when: shell_output.rc != 0
 
    # No. of RAM
    - name: Input No. of RAM
      pause:
        prompt: "Enter No. of RAM(GB)"
        echo: yes
      register: result
    - set_fact:
        RAM: "{{ result.user_input }}" 

    - name: Check if {{ RAM }} is a valid integer
      shell: "echo {{ RAM }} |egrep '^[0-9]+$' > /dev/null 2>&1"
      ignore_errors: true
      register: shell_output

    - fail:
        msg: "No. of RAM(GB) is invalid!"
      when: shell_output.rc != 0

    # Define the correct ntp_server1/2
    - name: Set ntp_server1/2 to cdchkt71/72
      set_fact:
        ntp_server1: cdchkt71
        ntp_server2: cdchkt72
      when: MODE == "prod" and ZONE == "intranet"

    - name: Set ntp_server1/2 to cdchkt21/22
      set_fact:
        ntp_server1: cdchhk21
        ntp_server2: cdchhk22
      when: MODE == "non-prod" and ZONE == "intranet"

    - name: Set ntp_server1/2 to cdchkt91/92
      set_fact:
        ntp_server1: cdchkt91
        ntp_server2: cdchkt92
      when: MODE == "prod" and ZONE == "dmz"

    - name: Set ntp_server1/2 to cdchkt31/32
      set_fact:
        ntp_server1: cdchkt31
        ntp_server2: cdchkt32
      when: MODE == "non-prod" and ZONE == "dmz"

    # Define the correct mail server
    - name: Set mailserver to DSmailcorphts.server.ha.org.hk
      set_fact:
        mailserver: DSmailcorphts.server.ha.org.hk
      when: MODE == "prod" 

    - name: Set mailserver to 192.168.150.209
      set_fact:
        mailserver: 192.168.150.209
      when: MODE == "prod" and ZONE == "dmz" and DC == "dc7"

    - name: Set mailserver to 192.168.50.159
      set_fact:
        mailserver: 192.168.50.159
      when: MODE == "prod" and ZONE == "dmz" and DC == "dc6"

    - name: Set mailserver to DSmaildevsmtp
      set_fact:
        mailserver: DSmaildevsmtp
      when: MODE == "non-prod" 

    # Verify whether it's VM or LPAR
    - name: Verify whether it's VM or LPAR
      shell: 'lsdev -C |grep -i "l-lan"'
      ignore_errors: true
      register: shell_output

    - name: Set Real HW type
      set_fact:
        RHW: "{% if shell_output.rc == 0 %} vm {% else %} lpar {% endif %}"

    # User Input Confirmation
    - name: User Input Confirmation
      pause:
        prompt: |
          -------------------------------------------------User Input configuration---------------------------------------------------
          Hostname      DataCenter   Hardware-type    Real-HW-type            MODE            ZONE         OS-type             CPU             RAM
          {{inventory_hostname}}          {{DC}}              {{HW}}            {{RHW}}            {{MODE}}        {{ZONE}}          {{OS_type}}               {{CPU}}               {{RAM}}
          ----------------------------------------------------------------------------------------------------------------------------


          ***       Please DO NOT execute this script in production machine !!!      ***
          Confirm to go ahead? (y/n)
        echo: yes
      register: result
    - meta: end_host
      when: result.user_input != "Y" and result.user_input != "y"

  # System verification
  tasks:
    
    ## Start step 2 - Verify System services ##
    
    # Verify System services
    - name: Verify System services
      shell: |
        echo "Checking system services..........................\c"
        inittab=`cat /etc/inittab|egrep -w "xmquery|xmtopas"|grep '^:'`
        if [[ $? = 0 ]] ; then
                echo "ERROR"
                echo $inittab
        else
                echo "OK"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"
 
    # Checking IOCP
    - name: Checking IOCP
      shell: |
        echo "Checking IOCP.....................................\c"
        iocp=`lsdev -C |grep iocp|grep Available`
        if [[ $? = 0 ]] ; then
                echo "OK"
        else
                echo "iocp is not available"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking IBM.DRM
    - name: Checking IBM.DRM
      shell: |
        echo "Checking IBM.DRM..................................\c"
        ibmdr=`ps -ef |grep -v grep |grep DRM`
        if [[ $? = 0 ]] ; then
                echo "OK"
        else
                echo "IBM.DRM is not available"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking sendmail
    - name: Checking sendmail
      shell: |
        echo "Checking sendmail.................................\c"
        mailsend=`echo 'Handover machine sendmail test '{{DC}} |mail -v -s 'Handover machine sendmail test' lcc440@pyn.ha.org.hk`

        if [[ $? = 0 ]] ; then
                echo "OK"
        else
                echo "Mail is not working"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking correct mail server
    - name: Checking correct mail server
      shell: |
        echo "Checking correct mail server......................\c"
        inittab=`cat /etc/mail/sendmail.cf|egrep $mailserver`
        if [[ $? = 0 ]] ; then
                echo "OK"
        else
                echo "ERROR"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    ## Start step 3,4 - Verify /etc/inittab and ~cmopr/etc/filesystem.cfg ##
    
    # Checking inittab 
    - name: Checking inittab
      shell: |
        echo "Checking inittab .................................\c"
        inittab=`cat /etc/inittab|egrep -w "rcnfs|rcnsr|rctma1|ntp|cron|rclocal"|grep '^:'`
        if [[ $? = 0 ]] ; then
                echo "ERROR"
                echo $inittab
        else
                echo "OK"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking filesystem.cfg
    - name: Checking filesystem.cfg
      shell: |
        echo "Checking filesystem.cfg ..........................\c"
        filecfg=`grep "\?" ~cmopr/etc/filesystem.cfg`
        if [[ $? = 0 ]] ; then
                echo "ERROR"
                echo $filecfg
        else
                echo "OK"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    ## Start step 5 - Verify system parameter and configurations ##

    # Checking maxuproc
    - name: Checking maxuproc
      shell: |
        echo "Checking maxuproc.................................\c"
        maxuproc=`lsattr -El sys0 |grep maxuproc|awk '{print $2}'`
        OS_type=`echo {{ OS_type }} | tr '[A-Z]' '[a-z]'`

        if [ $OS_type = "sybase" ]; then
                chk_maxuproc="2048"
        elif [ $OS_type = "oracle" ]; then
                chk_maxuproc="16384"
        else
                echo "OS type should be Oracle or Sybase !"
        fi

        if [ "$chk_maxuproc" = "$maxuproc" ]; then
                echo "OK"
        else
                echo "ERROR"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking SAN disks attributes
    - name: Checking SAN disks attributes
      shell: |
        echo "Checking SAN disks attributes.....................\c"
        lsdev -Cc disk  |grep MPIO |while read DISK STATUS LOCT BRAND OTHER
        do
                actl_algm=$(lsattr -El $DISK -a algorithm -F value)
                actl_revdpol=$(lsattr -El $DISK -a reserve_policy -F value)
                actl_qtype=$(lsattr -El $DISK -a q_type -F value)
                actl_qdepth=$(lsattr -El $DISK -a queue_depth -F value)
                actl_rwtout=$(lsattr -El $DISK -a rw_timeout -F value)
                if [[ $BRAND = 'Hitachi' ]]; then
                        if [[ $actl_algm != 'round_robin' || $actl_revdpol != 'no_reserve' || $actl_qtype != 'simple' || $actl_qdepth != '8' || $actl_rwtout != '60'
         ]]; then
                                errsan=1
                        fi
                fi
        done
        if [ errsan == 1 ] ; then
                 echo "ERROR"
        else
                 echo "OK"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking CPU configure
    - name: Checking CPU configure
      shell: |
        echo "Checking CPU configure............................\c"

        no_of_cpu=`lsdev -C |grep proc |grep Available|wc -l`

        if [ $no_of_cpu == {{CPU}} ]; then
                echo "OK"
        else
                echo "ERROR"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking memory configure
    - name: Checking memory configure
      shell: |
        echo "Checking memory configure.........................\c"

        no_of_ram=`lsattr -El mem0|grep goodsize|awk '{print $2}'`
        ram_in_G=`expr $no_of_ram / 1024`

        if [ $ram_in_G == {{RAM}} ]; then
                echo "OK"
        else
                echo "ERROR"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking GigaEthernet parameters
    - name: Checking GigaEthernet parameters
      shell: |
        lsdev -Cc adapter |egrep ent|egrep Available |egrep "100\/1000|Gigabit|10GbE|1GbE" >/dev/null 2>&1
        if [[ $? -eq 1 ]]; then
                echo "Checking GigaEthernet parameters..................OK"
        fi

        lsdev -Cc adapter |egrep ent|egrep Available |egrep "100\/1000|Gigabit|10GbE|1GbE|l-lan" |cut -d" " -f 1 |while read ent
        do
                echo "Checking GigaEthernet $ent parameters.............\c"
                lsattr -El $ent |egrep "chksum_offload|large_send" |egrep "yes" >/dev/null 2>&1
                if [[ $? -eq 0 ]]; then
                                # Either chksum_offload/large_send is greped

                        en=`echo $ent |sed s/ent/en/`
                        enstate=`lsattr -El $en |grep "^state" |awk '{print $2}' 2>/dev/null`
                        if [ $enstate = "up" ]; then
                                        # If status is up
                                echo "ERROR"
                        else
                                        # Parameter is not OK, but not in used
                                msg="OK"

                                lsdev -Cc adapter |egrep -i Etherchannel|cut -d" " -f 1|while read ethc
                                do
                                                # EtherChannel Configured
                                        lsattr -El $ethc |egrep adapter_names |awk '{print $2}'|egrep $ent >/dev/null
                                        if [[ $? -eq 0 ]]; then
                                                        # The card is in used actually,
                                                        # but configured as EtherChannel
                                                enc=`echo $ethc |sed s/ent/en/`
                                                encstate=`lsattr -El $enc |grep "^state" |awk '{print $2}' 2>/dev/null`
                                                if [ $encstate = "up" ]; then
                                                             # The EtherChannel is in 'up' state
                                                        msg="ERROR"
                                                fi
                                        fi
                                done
                                echo "$msg"
                        fi
                else
                        echo "OK"
                fi
        done
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout_lines}}"

    # Checking gateway of EtherChannel
    - name: Checking gateway of EtherChannel
      shell: |
        default_gw=`netstat -rn |grep default|awk '{print $2}'`

        if [ {{HW}} != "vm" ]; then

        lsdev -C |grep -i etherchannel|cut -d" " -f 1 |while read etherchannel
        do
                gwent=`lsattr -El $etherchannel|grep netaddr|awk '{print $2}'`
                atlip=`grep $host_name"-atl" /etc/hosts |awk '{print $1}'`
                atlip2=`echo $atlip |sed s/\://|cut -d "." -f 1-3`
                atlgw=$atlip2".254"
                echo "Checking gateway of EtherChannel $etherchannel.............\c"

                cent=`echo $etherchannel|sed 's/ent/en/'`

                entip=`ifconfig $cent|grep inet|head -1|awk '{print $2}'`

                echo $entip |egrep "^20.." > /dev/null 2>&1
                if [ "$?" -eq "0" ]; then
                        iptype="Private"
                else
                        iptype="non-Private"
                fi

        ## Verify whether it is 10G ATL ##
                if [ $gwent == $default_gw ]; then
                echo "OK"
                elif [ $iptype == "Private" ]; then
                        echo "OK"
                elif [ $gwent == $atlgw ]; then
                        echo "OK"
                else
                        echo "ERROR"
                fi
        done

        fi

      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking /etc/ntp.conf
    - name: Checking /etc/ntp.conf
      shell: |
        echo "Checking /etc/ntp.conf ...........................\c"
        ntpsrv=`cat /etc/ntp.conf|egrep -w server|egrep "{{ntp_server1}}|{{ntp_server2}}" |wc -l`

        if [ $ntpsrv -eq 2 ] ; then
                echo "OK"
        else
                echo "ERROR"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking /etc/rc.ntp
    - name: Checking /etc/rc.ntp
      shell: |
        echo "Checking /etc/rc.ntp..............................\c"
        ntprc=`cat /etc/rc.ntp|egrep -w ntpdate|egrep "{{ntp_server1}}|{{ntp_server2}}" |wc -l`


        if [ $ntpsrv -eq 2 ] ; then
                echo "OK"
        else
                echo "ERROR"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking /etc/resolv.conf
    - name: Checking /etc/resolv.conf
      shell: |
        echo "Checking /etc/resolv.conf.........................\c"

        if [ {{ZONE}} = "dmz" ]; then
                if [ {{MODE}} = "non-prod" ]; then
                        resolvfile="resolv.conf.dmz.non-prod"
                else
                        resolvfile="resolv.conf.dmz."{{DC}}
                fi
        else
                resolvfile="resolv.conf."{{DC}}
        fi

        cmpresolv=`diff -b /etc/resolv.conf $etcpath/$resolvfile`

        if [ $? = 0 ] ; then
                echo "OK"
        else
                echo "ERROR"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking /etc/rc.local
    - name: Checking /etc/rc.local
      shell: |
        echo "Checking /etc/rc.local............................\c"

        atlip=`ping -c 1 \`hostname\`-atl|grep from|awk '{print $4}'|sed s/\://|cut -d "." -f 1-3`
        chk_route=`netstat -rn |grep -w UG|grep -v default|awk '{print $2}'|sort -u|cut -d "." -f 1-3`
        chk_route_count=`netstat -rn |grep -w UG|grep -v default|awk '{print $2}'|sort -u|wc -l`

        if [ $chk_route_count -ne 1 ]; then
                echo "ERROR, wrong gateway "

        ##elif [[ `echo $chk_route |wc -l` -ne 1 ]]; then
        ##      echo "ERROR"

        elif [ $atlip == $chk_route ]; then
                echo "OK"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking size of ~cmopr/log/messages
    - name: Checking size of ~cmopr/log/messages
      shell: |
        echo "Checking size of ~cmopr/log/messages..............\c"

        if [ -s $cmopr_messages ]; then
                echo "ERROR, messages file is not empty"
        else
                echo "OK"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking system backup in root cronjob
    - name: Checking system backup in root cronjob
      shell: |
        echo "Checking system backup in root cronjob............\c"
        ## Checking access permission of cronjob ##
        if [ -r /var/spool/cron/crontabs/root ]
        then

                cronsys_err="0"
                croncount_err="0"

                croncount=`crontab -l|grep system_backup|wc -l`
                if [ $? = 0 ] ; then
                        croncount_err="1"
                        cronsys_err="1"
                fi

                cronsys=`crontab -l |grep system_backup|grep '^#'`
                if [ $? = 0 ]; then
                        cronsys_err="0"
                fi

                if [ $croncount_err = "1" ] && [ $cronsys_err = "1" ]; then
                        echo "OK"
                else
                        echo "ERROR"
                fi

        else
                echo  "ERROR - Cannot read crontab"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking system backup in /nimbackup
    - name: Checking system backup in /nimbackup
      shell: |
        if [ -r /var/spool/cron/crontabs/root ]
        then

                echo "Checking system backup in /nimbackup..............\c"
                nimsys=`ls -lrt /nimbackup/bos.obj.{{inventory_hostname}}`

                if [ $? = 0 ] ; then
                        echo "OK"
                else
                        echo "ERROR"
                fi

        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking /etc/sudoers
    - name: Checking /etc/sudoers
      shell: |
        echo "Checking /etc/sudoers.............................\c"
        if [ -r /etc/sudoers ]
        then

                sudoers=`cat /etc/sudoers|egrep -i "sybase|oracle|grid|informix|ctmag|ctmagt|tivoli|patrol|sanadm|atladm"`
                if [[ $? = 0 ]] ; then
                        echo "ERROR"
                        echo $sudoers
                else
                        echo "OK"
                fi
        else
                        echo  "ERROR - Cannot read /etc/sudoers"
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking VLAN tag ID
    - name: Checking /etc/sudoers
      shell: |
        if [ {{RHW}} = "lpar" ]; then

        vlanent=`lsdev -C |grep ent |grep VLAN|awk '{print $1}'`
        vlanentcount=`lsdev -C |grep ent |grep VLAN|awk '{print $1}'|wc -l `

                if [ $vlanentcount -eq 1 ] ; then

                        echo "Checking VLAN tag ID..............................\c"

                        entvlan=`lsattr -El $vlanent |grep vlan_tag_id|awk '{print $2}'`

                        vlanen=`echo $vlanent |sed s/ent/en/`

                        envlan=`ifconfig $vlanen|grep inet |cut -d "." -f 3`

                                if [ $entvlan = $envlan ]; then
                                        echo "OK"
                                else
                                        echo "ERROR"
                                fi
                fi
        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking Etherchannel recovery
    - name: Checking Etherchannel recovery
      shell: |
        if [ {{RHW}} = "lpar" ]; then
            echo "Checking Etherchannel recovery....................\c"

            errpt |egrep -i "ETHERCHANNEL RECOVERY|ETHERCHANNEL FAILOVER" |sort -u |sort -rn +1|head -2 > {{ethercl_tmp}}

            recovery_test_chk=`cat {{ethercl_tmp}} |head -1 |awk '{print "errpt -J ECH_CHAN_RCVRY -a -s "$2}'|ksh|awk '/Detail Data/{x=NR+1}(NR<=x){print}'|tail -1`
            ##recovery_test_chk=`cat {{ethercl_tmp}} |head -1 |awk '{print "errpt -a -s "$2}'|ksh|awk '/Detail Data/{x=NR+1}(NR<=x){print}'|tail -1`
            recovery_statement="A primary adapter in the EtherChannel recovered: returning to main channel"

            if [ "$recovery_test_chk" = "$recovery_statement" ]; then
                echo "OK"
            else
                echo "ERROR"
            fi

            ##echo $recovery_test_chk
            ##echo $recovery_statement

        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    # Checking Etherchannel failover
    - name: Checking Etherchannel failover
      shell: |
        if [ {{RHW}} = "lpar" ]; then
            echo "Checking Etherchannel failover....................\c"

            failover_test_chk=`cat {{ethercl_tmp}} |tail -1 |awk '{print "errpt -J ECH_CHAN_FAIL -a -s "$2}'|ksh|awk '/Detail Data/{x=NR+1}(NR<=x){print}'|tail -1`
            ##failover_test_chk=`cat {{ethercl_tmp}} |tail -1 |awk '{print "errpt -a -s "$2}'|ksh|awk '/Detail Data/{x=NR+1}(NR<=x){print}'|tail -1`
            failover_statement="All primary EtherChannel adapters failed: switching over to backup adapter"

            if [ "$failover_test_chk" = "$failover_statement" ]; then
                    echo "OK"
            else
                    echo "ERROR"
            fi

            ##echo $failover_test_chk
            ##echo $failover_statement

        fi
      ignore_errors: true
      register: shell_output

    - set_fact:
        results: "{{ results + shell_output.stdout_lines  }}"

    - debug:
        msg: "{{ shell_output.stdout }}"

    - name: Report
      debug:
        var: results 
